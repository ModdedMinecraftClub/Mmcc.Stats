/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class TpsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getAll(): Promise<TpsStat[]> {
        let url_ = this.baseUrl + "/api/tps";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<TpsStat[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TpsStat.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TpsStat[]>(<any>null);
    }

    post(command: Command): Promise<TpsStat> {
        let url_ = this.baseUrl + "/api/tps";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<TpsStat> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = TpsStat.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TpsStat>(<any>null);
    }

    getById(id: number): Promise<TpsStat> {
        let url_ = this.baseUrl + "/api/tps/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<TpsStat> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TpsStat.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TpsStat>(<any>null);
    }

    get(fromDateTime: Date | undefined, toDateTime: Date | undefined): Promise<ServerTpsChartData[]> {
        let url_ = this.baseUrl + "/api/tps/chart?";
        if (fromDateTime === null)
            throw new Error("The parameter 'fromDateTime' cannot be null.");
        else if (fromDateTime !== undefined)
            url_ += "FromDateTime=" + encodeURIComponent(fromDateTime ? "" + fromDateTime.toJSON() : "") + "&";
        if (toDateTime === null)
            throw new Error("The parameter 'toDateTime' cannot be null.");
        else if (toDateTime !== undefined)
            url_ += "ToDateTime=" + encodeURIComponent(toDateTime ? "" + toDateTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ServerTpsChartData[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServerTpsChartData.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServerTpsChartData[]>(<any>null);
    }

    getWeeklyAvgs(): Promise<Result> {
        let url_ = this.baseUrl + "/api/tps/weekly/avgs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeeklyAvgs(_response);
        });
    }

    protected processGetWeeklyAvgs(response: Response): Promise<Result> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result>(<any>null);
    }
}

export class ServersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(): Promise<ServerDto[]> {
        let url_ = this.baseUrl + "/api/servers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ServerDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServerDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServerDto[]>(<any>null);
    }

    post(command: Command2): Promise<Server> {
        let url_ = this.baseUrl + "/api/servers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<Server> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Server.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Server>(<any>null);
    }

    put(command: Command3): Promise<void> {
        let url_ = this.baseUrl + "/api/servers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getById(id: number): Promise<ServerDto> {
        let url_ = this.baseUrl + "/api/servers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ServerDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServerDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServerDto>(<any>null);
    }
}

export class PingsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(): Promise<Ping[]> {
        let url_ = this.baseUrl + "/api/pings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Ping[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Ping.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Ping[]>(<any>null);
    }

    getByServerId(serverId: number, id: string): Promise<Ping[]> {
        let url_ = this.baseUrl + "/api/pings/server/{id}";
        if (serverId === undefined || serverId === null)
            throw new Error("The parameter 'serverId' must be defined.");
        url_ = url_.replace("{ServerId}", encodeURIComponent("" + serverId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetByServerId(_response);
        });
    }

    protected processGetByServerId(response: Response): Promise<Ping[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Ping.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Ping[]>(<any>null);
    }

    getById(id: number): Promise<Ping> {
        let url_ = this.baseUrl + "/api/pings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<Ping> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Ping.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Ping>(<any>null);
    }

    getChartData(fromDateTime: Date | undefined, toDateTime: Date | undefined): Promise<ServerPlayerbaseChartData[]> {
        let url_ = this.baseUrl + "/api/pings/chart?";
        if (fromDateTime === null)
            throw new Error("The parameter 'fromDateTime' cannot be null.");
        else if (fromDateTime !== undefined)
            url_ += "FromDateTime=" + encodeURIComponent(fromDateTime ? "" + fromDateTime.toJSON() : "") + "&";
        if (toDateTime === null)
            throw new Error("The parameter 'toDateTime' cannot be null.");
        else if (toDateTime !== undefined)
            url_ += "ToDateTime=" + encodeURIComponent(toDateTime ? "" + toDateTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetChartData(_response);
        });
    }

    protected processGetChartData(response: Response): Promise<ServerPlayerbaseChartData[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServerPlayerbaseChartData.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServerPlayerbaseChartData[]>(<any>null);
    }

    getChartDataAsAvg(fromDateTime: Date | undefined, toDateTime: Date | undefined, windowSize: number | undefined): Promise<ServerPlayerbaseChartData[]> {
        let url_ = this.baseUrl + "/api/pings/chart/avg?";
        if (fromDateTime === null)
            throw new Error("The parameter 'fromDateTime' cannot be null.");
        else if (fromDateTime !== undefined)
            url_ += "FromDateTime=" + encodeURIComponent(fromDateTime ? "" + fromDateTime.toJSON() : "") + "&";
        if (toDateTime === null)
            throw new Error("The parameter 'toDateTime' cannot be null.");
        else if (toDateTime !== undefined)
            url_ += "ToDateTime=" + encodeURIComponent(toDateTime ? "" + toDateTime.toJSON() : "") + "&";
        if (windowSize === null)
            throw new Error("The parameter 'windowSize' cannot be null.");
        else if (windowSize !== undefined)
            url_ += "WindowSize=" + encodeURIComponent("" + windowSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetChartDataAsAvg(_response);
        });
    }

    protected processGetChartDataAsAvg(response: Response): Promise<ServerPlayerbaseChartData[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServerPlayerbaseChartData.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServerPlayerbaseChartData[]>(<any>null);
    }

    getWeeklyAvgs(): Promise<Result2> {
        let url_ = this.baseUrl + "/api/pings/weekly/avgs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeeklyAvgs(_response);
        });
    }

    protected processGetWeeklyAvgs(response: Response): Promise<Result2> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result2.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Result2>(<any>null);
    }
}

export class TpsStat implements ITpsStat {
    id?: number;
    serverId?: number;
    statTime?: Date;
    tps?: number;
    server?: Server | undefined;

    constructor(data?: ITpsStat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.serverId = _data["serverId"];
            this.statTime = _data["statTime"] ? new Date(_data["statTime"].toString()) : <any>undefined;
            this.tps = _data["tps"];
            this.server = _data["server"] ? Server.fromJS(_data["server"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TpsStat {
        data = typeof data === 'object' ? data : {};
        let result = new TpsStat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serverId"] = this.serverId;
        data["statTime"] = this.statTime ? this.statTime.toISOString() : <any>undefined;
        data["tps"] = this.tps;
        data["server"] = this.server ? this.server.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITpsStat {
    id?: number;
    serverId?: number;
    statTime?: Date;
    tps?: number;
    server?: Server | undefined;
}

export class Server implements IServer {
    serverId?: number;
    serverIp?: string | undefined;
    serverPort?: number;
    serverName?: string | undefined;
    enabled?: boolean;

    constructor(data?: IServer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverId = _data["serverId"];
            this.serverIp = _data["serverIp"];
            this.serverPort = _data["serverPort"];
            this.serverName = _data["serverName"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): Server {
        data = typeof data === 'object' ? data : {};
        let result = new Server();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverId"] = this.serverId;
        data["serverIp"] = this.serverIp;
        data["serverPort"] = this.serverPort;
        data["serverName"] = this.serverName;
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface IServer {
    serverId?: number;
    serverIp?: string | undefined;
    serverPort?: number;
    serverName?: string | undefined;
    enabled?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class Command implements ICommand {
    serverId!: number;
    tps!: number;

    constructor(data?: ICommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverId = _data["serverId"];
            this.tps = _data["tps"];
        }
    }

    static fromJS(data: any): Command {
        data = typeof data === 'object' ? data : {};
        let result = new Command();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverId"] = this.serverId;
        data["tps"] = this.tps;
        return data; 
    }
}

export interface ICommand {
    serverId: number;
    tps: number;
}

export class ServerTpsChartData implements IServerTpsChartData {
    serverName?: string | undefined;
    times?: Date[] | undefined;
    tps?: number[] | undefined;

    constructor(data?: IServerTpsChartData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverName = _data["serverName"];
            if (Array.isArray(_data["times"])) {
                this.times = [] as any;
                for (let item of _data["times"])
                    this.times!.push(new Date(item));
            }
            if (Array.isArray(_data["tps"])) {
                this.tps = [] as any;
                for (let item of _data["tps"])
                    this.tps!.push(item);
            }
        }
    }

    static fromJS(data: any): ServerTpsChartData {
        data = typeof data === 'object' ? data : {};
        let result = new ServerTpsChartData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverName"] = this.serverName;
        if (Array.isArray(this.times)) {
            data["times"] = [];
            for (let item of this.times)
                data["times"].push(item.toISOString());
        }
        if (Array.isArray(this.tps)) {
            data["tps"] = [];
            for (let item of this.tps)
                data["tps"].push(item);
        }
        return data; 
    }
}

export interface IServerTpsChartData {
    serverName?: string | undefined;
    times?: Date[] | undefined;
    tps?: number[] | undefined;
}

export class Result implements IResult {
    averages?: Average[] | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["averages"])) {
                this.averages = [] as any;
                for (let item of _data["averages"])
                    this.averages!.push(Average.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.averages)) {
            data["averages"] = [];
            for (let item of this.averages)
                data["averages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IResult {
    averages?: Average[] | undefined;
}

export class Average implements IAverage {
    serverName?: string | undefined;
    avg?: number;

    constructor(data?: IAverage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverName = _data["serverName"];
            this.avg = _data["avg"];
        }
    }

    static fromJS(data: any): Average {
        data = typeof data === 'object' ? data : {};
        let result = new Average();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverName"] = this.serverName;
        data["avg"] = this.avg;
        return data; 
    }
}

export interface IAverage {
    serverName?: string | undefined;
    avg?: number;
}

export class ServerDto implements IServerDto {
    serverId?: number;
    serverName?: string | undefined;
    enabled?: boolean;

    constructor(data?: IServerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverId = _data["serverId"];
            this.serverName = _data["serverName"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): ServerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverId"] = this.serverId;
        data["serverName"] = this.serverName;
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface IServerDto {
    serverId?: number;
    serverName?: string | undefined;
    enabled?: boolean;
}

export class Command2 implements ICommand2 {
    serverIp!: string;
    serverPort!: number;
    serverName!: string;
    enabled!: boolean;

    constructor(data?: ICommand2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverIp = _data["serverIp"];
            this.serverPort = _data["serverPort"];
            this.serverName = _data["serverName"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): Command2 {
        data = typeof data === 'object' ? data : {};
        let result = new Command2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverIp"] = this.serverIp;
        data["serverPort"] = this.serverPort;
        data["serverName"] = this.serverName;
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface ICommand2 {
    serverIp: string;
    serverPort: number;
    serverName: string;
    enabled: boolean;
}

export class Command3 implements ICommand3 {
    serverId!: number;
    serverIp!: string;
    serverPort!: number;
    serverName!: string;
    enabled!: boolean;

    constructor(data?: ICommand3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverId = _data["serverId"];
            this.serverIp = _data["serverIp"];
            this.serverPort = _data["serverPort"];
            this.serverName = _data["serverName"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): Command3 {
        data = typeof data === 'object' ? data : {};
        let result = new Command3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverId"] = this.serverId;
        data["serverIp"] = this.serverIp;
        data["serverPort"] = this.serverPort;
        data["serverName"] = this.serverName;
        data["enabled"] = this.enabled;
        return data; 
    }
}

export interface ICommand3 {
    serverId: number;
    serverIp: string;
    serverPort: number;
    serverName: string;
    enabled: boolean;
}

export class Ping implements IPing {
    id?: number;
    serverId?: number;
    pingTime?: Date;
    playersOnline?: number;
    playersMax?: number;
    server?: Server | undefined;

    constructor(data?: IPing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.serverId = _data["serverId"];
            this.pingTime = _data["pingTime"] ? new Date(_data["pingTime"].toString()) : <any>undefined;
            this.playersOnline = _data["playersOnline"];
            this.playersMax = _data["playersMax"];
            this.server = _data["server"] ? Server.fromJS(_data["server"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Ping {
        data = typeof data === 'object' ? data : {};
        let result = new Ping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serverId"] = this.serverId;
        data["pingTime"] = this.pingTime ? this.pingTime.toISOString() : <any>undefined;
        data["playersOnline"] = this.playersOnline;
        data["playersMax"] = this.playersMax;
        data["server"] = this.server ? this.server.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPing {
    id?: number;
    serverId?: number;
    pingTime?: Date;
    playersOnline?: number;
    playersMax?: number;
    server?: Server | undefined;
}

export class ServerPlayerbaseChartData implements IServerPlayerbaseChartData {
    serverName?: string | undefined;
    times?: Date[] | undefined;
    players?: number[] | undefined;

    constructor(data?: IServerPlayerbaseChartData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverName = _data["serverName"];
            if (Array.isArray(_data["times"])) {
                this.times = [] as any;
                for (let item of _data["times"])
                    this.times!.push(new Date(item));
            }
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(item);
            }
        }
    }

    static fromJS(data: any): ServerPlayerbaseChartData {
        data = typeof data === 'object' ? data : {};
        let result = new ServerPlayerbaseChartData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverName"] = this.serverName;
        if (Array.isArray(this.times)) {
            data["times"] = [];
            for (let item of this.times)
                data["times"].push(item.toISOString());
        }
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item);
        }
        return data; 
    }
}

export interface IServerPlayerbaseChartData {
    serverName?: string | undefined;
    times?: Date[] | undefined;
    players?: number[] | undefined;
}

export class Result2 implements IResult2 {
    thisWeek?: Average2[] | undefined;
    lastWeek?: Average2[] | undefined;

    constructor(data?: IResult2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["thisWeek"])) {
                this.thisWeek = [] as any;
                for (let item of _data["thisWeek"])
                    this.thisWeek!.push(Average2.fromJS(item));
            }
            if (Array.isArray(_data["lastWeek"])) {
                this.lastWeek = [] as any;
                for (let item of _data["lastWeek"])
                    this.lastWeek!.push(Average2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Result2 {
        data = typeof data === 'object' ? data : {};
        let result = new Result2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.thisWeek)) {
            data["thisWeek"] = [];
            for (let item of this.thisWeek)
                data["thisWeek"].push(item.toJSON());
        }
        if (Array.isArray(this.lastWeek)) {
            data["lastWeek"] = [];
            for (let item of this.lastWeek)
                data["lastWeek"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IResult2 {
    thisWeek?: Average2[] | undefined;
    lastWeek?: Average2[] | undefined;
}

export class Average2 implements IAverage2 {
    serverName?: string | undefined;
    avg?: number;

    constructor(data?: IAverage2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverName = _data["serverName"];
            this.avg = _data["avg"];
        }
    }

    static fromJS(data: any): Average2 {
        data = typeof data === 'object' ? data : {};
        let result = new Average2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverName"] = this.serverName;
        data["avg"] = this.avg;
        return data; 
    }
}

export interface IAverage2 {
    serverName?: string | undefined;
    avg?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}